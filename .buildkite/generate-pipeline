#!/usr/bin/env bash
# Usage: create a pipeline that looks like this:
#
# steps:
#   - name: ":buildkite:"
#     command: .buildkite/generate-pipeline
#     retry:
#       manual:
#         permit_on_passed: true
#     plugins:
#       - seek-oss/aws-sm#v2.2.1:
#           env:
#             BUILDKITE_API_ACCESS_TOKEN: "global/buildkite-api-access-token"
#
# If you had a previous generator, you need to wait until all branches have the
# script before calling it, or change the command to:
#
# git merge-base --is-ancestor <merge-commit-of-generate-pipeline> HEAD && .buildkite/generate-pipeline || ( <previous-command> )
#
# This script installs and calls monofo with a static version so the install is
# cached and fast

set -euo pipefail

BUILDKITE_AGENT_ACCESS_TOKEN=${BUILDKITE_AGENT_ACCESS_TOKEN:-}
PIPELINE_FILE="$(mktemp /tmp/generate-pipeline.XXXXXX)"

# Exclude the test fixtures from being found by own actual build - this is only necessary in the monofo repo
export PIPELINE_FILE_IGNORE_GLOB='**/node_modules/**:test/**:docs/**'

echo "--- Fetching other branches" >&2
git fetch -v origin +refs/heads/*:refs/remotes/origin/*

echo "+++ :pipeline: Generating..." >&2
DEBUG="monofo:*" npx monofo@2.1.0 > "$PIPELINE_FILE"

echo "--- :pipeline: Result" >&2
cat "$PIPELINE_FILE"

if [[ -n "$BUILDKITE_AGENT_ACCESS_TOKEN" ]]; then
  echo "--- :pipeline: Upload" >&2
  buildkite-agent pipeline upload < "$PIPELINE_FILE"
else
  echo "Skipping pipeline upload, because no BUILDKITE_AGENT_ACCESS_TOKEN: probably not running in Buildkite"
fi

rm -f "$PIPELINE_FILE"
