---
# Backup buildkite pipeline for when Monofo is failing and won't deploy itself
# Trigger this pipeline using `BUILD_IGNORE_MONOFO=1`

env:
  # This is the dynamic image tag, used when changes have been made to the Dockerfile; it gives those changes a unique build artifact
  NODE_IMAGE_TAG: "239595706494.dkr.ecr.us-west-2.amazonaws.com/monofo:node-${BUILDKITE_COMMIT}-${BUILDKITE_BUILD_NUMBER}"

templates:
  # Plugin templates
  - &dc
    docker-compose#v3.9.0:
      run: node

  # Artifacts
  - &node-ts-artifacts
    improbable-eng/metahook#v0.4.1:
      pre-command: >
        buildkite-agent artifact download node-modules.tar.lz4 . && tar -x --use-compress-program=lz4 -f node-modules.tar.lz4 && rm -rf node-modules.tar.lz4 &
        buildkite-agent artifact download typescript.tar.lz4 . && tar -x --use-compress-program=lz4 -f typescript.tar.lz4 && rm -rf typescript.tar.lz4 &
        wait

steps:
  - name: ":docker::nodejs: Container"
    key: node-image
    commands:
      - docker build -f Dockerfile -t "${NODE_IMAGE_TAG}" .
      - docker push "${NODE_IMAGE_TAG}"
      - >
        if [[ "${BUILDKITE_BRANCH}" == "main" ]]; then
          docker tag "${NODE_IMAGE_TAG}" 239595706494.dkr.ecr.us-west-2.amazonaws.com/monofo:node-main;
          docker push 239595706494.dkr.ecr.us-west-2.amazonaws.com/monofo:node-main;
        fi
    timeout_in_minutes: 20
    agents:
      queue: docker

  - name: ":yarn: Buildkite-only Install"
    key: node-modules
    depends_on:
      - node-image
    commands:
      - yarn install --frozen-lockfile
      - tar -c --use-compress-program="lz4 -2" -f node-modules.tar.lz4 node_modules
    timeout_in_minutes: 20
    plugins:
      - artifacts#v1.5.0:
          upload: node-modules.tar.lz4
      - *dc

  - name: ":typescript: Build"
    key: typescript
    depends_on:
      - node-image
      - node-modules
    commands:
      - yarn build
      - tar -c --use-compress-program="lz4 -2" -f typescript.tar.lz4 dist/
    timeout_in_minutes: 20
    plugins:
      - improbable-eng/metahook#v0.4.1:
          pre-command: buildkite-agent artifact download node-modules.tar.lz4 . && tar -x --use-compress-program=lz4 -f node-modules.tar.lz4 && rm -rf node-modules.tar.lz4
      - *dc
      - artifacts#v1.5.0:
          upload:
            - typescript.tar.lz4

  - label: ":jest: Test"
    key: test
    command: yarn test
    timeout_in_minutes: 10
    depends_on:
      - node-image
      - node-modules
      - typescript
    retry:
      manual:
        permit_on_passed: true
    plugins:
      - *node-ts-artifacts
      - *dc

  - label: ":eslint: Lint"
    key: lint
    command: yarn lint
    timeout_in_minutes: 10
    depends_on:
      - node-image
      - node-modules
      - typescript
    retry:
      manual:
        permit_on_passed: true
    plugins:
      - *node-ts-artifacts
      - *dc

  - name: ":bash: Bash Tests"
    key: plugin-test
    timeout_in_minutes: 20
    plugins:
      - docker-compose#v3.9.0:
          run: plugin-test

  - name: ":buildkite: Plugin Lint"
    key: plugin-lint
    timeout_in_minutes: 20
    plugins:
      - docker-compose#v3.9.0:
          run: plugin-lint
    soft_fail: # until we can fix https://github.com/buildkite-plugins/buildkite-plugin-linter/issues/409
      - exit_status: 1

  - label: ":shipit: Release"
    depends_on:
      - node-image
      - node-modules
      - typescript
      - test
      - lint
      - plugin-test
      - plugin-lint
    command: yarn run release
    branches: main next next-major beta alpha
    plugins:
      - improbable-eng/metahook#v0.4.1:
          pre-command: >
            buildkite-agent artifact download node-modules.tar.lz4 . && tar -x --use-compress-program=lz4 -f node-modules.tar.lz4 && rm -rf node-modules.tar.lz4 &
            buildkite-agent artifact download typescript.tar.lz4 . && tar -x --use-compress-program=lz4 -f typescript.tar.lz4 && rm -rf typescript.tar.lz4 &
            wait
            git fetch --tags -f # Until we stop clobbering tags during artifact rollout
      - *dc
      - seek-oss/aws-sm#v2.3.1:
          env:
            NPM_TOKEN: "global/npm-token"
