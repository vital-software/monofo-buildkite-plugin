#!/usr/bin/env bash
# Usage: create a pipeline that looks like this:
#
# steps:
#   - name: ":pipeline: Generate pipeline"
#     plugins:
#       - seek-oss/aws-sm#v2.2.1: # for example, but your secret management might be e.g. via S3 bucket or "env" file instead
#           env:
#             BUILDKITE_API_ACCESS_TOKEN: "global/buildkite-api-access-token"
#       - vital-software/monofo#<latest>:
#           generate: pipeline
#
# If you had a previous generator, you need to wait until all branches have the
# script before calling it, or change the command to:
#
# git merge-base --is-ancestor <merge-commit-of-generate-pipeline> HEAD && .buildkite/generate-pipeline || ( <previous-command> )
#
# This script installs and calls monofo with a static version so the install is
# cached and fast

set -euo pipefail

BUILDKITE_PLUGIN_MONOFO_GENERATE=${BUILDKITE_PLUGIN_MONOFO_GENERATE:-}
BUILDKITE_AGENT_ACCESS_TOKEN=${BUILDKITE_AGENT_ACCESS_TOKEN:-}

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

if [[ -n "${BUILDKITE_PLUGIN_MONOFO_GENERATE}" && "$BUILDKITE_PLUGIN_MONOFO_GENERATE" == "pipeline" ]]; then
  # shellcheck source=./lib/generate.bash
  source "${SCRIPT_DIR}/lib/generate.bash"
fi

if [[ -n "${BUILDKITE_PLUGIN_MONOFO_UPLOAD}" ]]; then
  # shellcheck source=./lib/upload.bash
  source "${SCRIPT_DIR}/lib/upload.bash"
fi

exit 0
